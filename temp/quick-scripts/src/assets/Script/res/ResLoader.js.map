{"version":3,"sources":["assets/Script/res/ResLoader.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * ResLoader2，封装资源的加载和卸载接口，隐藏新老资源底层差异\r\n * 1. 加载资源接口\r\n * 2. 卸载资源接口\r\n * \r\n * 2021-1-24 by 宝爷\r\n */\r\n\r\nimport ResManager from \"./ResManager\";\r\n\r\n// 资源加载的处理回调\r\nexport type ProcessCallback = (completedCount: number, totalCount: number, item: any) => void;\r\n// 资源加载的完成回调\r\nexport type CompletedCallback = (error: Error, resource: any | any[], urls?: string[]) => void;\r\n\r\n// load方法的参数结构\r\nexport interface LoadArgs {\r\n    bundle?: string;\r\n    url?: string | string[];\r\n    type?: typeof cc.Asset;\r\n    onCompleted?: CompletedCallback;\r\n    onProgess?: ProcessCallback;\r\n}\r\n\r\n// release方法的参数结构\r\nexport interface ReleaseArgs {\r\n    bundle?: string;\r\n    url?: string | string[] | cc.Asset | cc.Asset[],\r\n    type?: typeof cc.Asset,\r\n}\r\n\r\n// 兼容性处理\r\nlet isChildClassOf = cc.js[\"isChildClassOf\"]\r\nif (!isChildClassOf) {\r\n    isChildClassOf = cc[\"isChildClassOf\"];\r\n}\r\n\r\nexport default class ResLoader {\r\n\r\n    public static getLoader(): any {\r\n        return cc.loader;\r\n    }\r\n\r\n    public static makeLoadArgs(): LoadArgs {\r\n        do {\r\n            if (arguments.length < 2) {\r\n                break;\r\n            }\r\n            let ret: LoadArgs = {};\r\n            if (typeof arguments[1] == \"string\" || arguments[1] instanceof Array) {\r\n                if (typeof arguments[0] == \"string\") {\r\n                    ret.bundle = arguments[0];\r\n                    ret.url = arguments[1];\r\n                    if (arguments.length > 2 && isChildClassOf(arguments[2], cc.RawAsset)) {\r\n                        ret.type = arguments[2];\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            } else if (typeof arguments[0] == \"string\" || arguments[0] instanceof Array) {\r\n                ret.url = arguments[0];\r\n                if (isChildClassOf(arguments[1], cc.RawAsset)) {\r\n                    ret.type = arguments[1];\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n\r\n            if (typeof arguments[arguments.length - 1] == \"function\") {\r\n                ret.onCompleted = arguments[arguments.length - 1];\r\n                if (typeof arguments[arguments.length - 2] == \"function\" \r\n                    && !isChildClassOf(arguments[arguments.length - 2], cc.RawAsset)) {\r\n                    ret.onProgess = arguments[arguments.length - 2];\r\n                }\r\n            }\r\n\r\n            return ret;\r\n        } while (false);\r\n\r\n        console.error(`makeLoadArgs error ${arguments}`);\r\n        return null;\r\n    }\r\n\r\n    public static makeReleaseArgs(): ReleaseArgs {\r\n        do {\r\n            if (arguments.length < 1) {\r\n                break;\r\n            }\r\n\r\n            let ret: ReleaseArgs = {};\r\n            if (isChildClassOf(arguments[arguments.length - 1], cc.RawAsset)) {\r\n                ret.type = arguments[arguments.length - 1];\r\n            }\r\n\r\n            if (arguments.length > 1 && typeof arguments[0] == \"string\" &&\r\n                (typeof arguments[1] == \"string\" || arguments[1] instanceof Array)) {\r\n                ret.bundle = arguments[0];\r\n                ret.url = arguments[1];\r\n            } else {\r\n                ret.url = arguments[0];\r\n            }\r\n            return ret;\r\n        } while (false);\r\n\r\n        console.error(`makeLoadArgs error ${arguments}`);\r\n        return null;\r\n    }\r\n\r\n    private static makeFinishCallback(resArgs: LoadArgs): CompletedCallback {\r\n        console.time(\"load|\" + resArgs.url);\r\n        let finishCallback = (error: Error, resource: any) => {\r\n            if (!error) {\r\n                if (resource instanceof Array) {\r\n                    resource.forEach(element => {\r\n                        ResManager.Instance.cacheAsset(element);\r\n                    });\r\n                } else {\r\n                    ResManager.Instance.cacheAsset(resource);\r\n                }\r\n            }\r\n            if (resArgs.onCompleted) {\r\n                resArgs.onCompleted(error, resource);\r\n            }\r\n            console.timeEnd(\"load|\" + resArgs.url);\r\n        };\r\n        return finishCallback;\r\n    }\r\n\r\n    private static getUuid(url: string, type: typeof cc.Asset) {\r\n        let ccloader = ResLoader.getLoader();\r\n        let uuid = ccloader._getResUuid(url, type, false);\r\n        return uuid;\r\n    }\r\n\r\n    /**\r\n     * 开始加载资源\r\n     * @param bundle        assetbundle的路径\r\n     * @param url           资源url或url数组\r\n     * @param type          资源类型，默认为null\r\n     * @param onProgess     加载进度回调\r\n     * @param onCompleted   加载完成回调\r\n     */\r\n    public static load(url: string, onCompleted: CompletedCallback);\r\n    public static load(url: string, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(url: string, type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public static load(url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(url: string[], onCompleted: CompletedCallback);\r\n    public static load(url: string[], onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(url: string[], type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public static load(url: string[], type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(bundle: string, url: string, onCompleted: CompletedCallback);\r\n    public static load(bundle: string, url: string, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(bundle: string, url: string, type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public static load(bundle: string, url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(bundle: string, url: string[], onCompleted: CompletedCallback);\r\n    public static load(bundle: string, url: string[], onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(bundle: string, url: string[], type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public static load(bundle: string, url: string[], type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load() {\r\n        let resArgs: LoadArgs = ResLoader.makeLoadArgs.apply(ResLoader, arguments);\r\n        let finishCallback = ResLoader.makeFinishCallback(resArgs);\r\n        let ccloader = ResLoader.getLoader();\r\n        if (typeof resArgs.url == \"string\") {\r\n            if (typeof (ccloader['_getResUuid']) == \"function\") {\r\n                let uuid = ccloader._getResUuid(resArgs.url, resArgs.type, false);\r\n                if (uuid) {\r\n                    ccloader.loadRes(resArgs.url, resArgs.type, resArgs.onProgess, finishCallback);\r\n                } else {\r\n                    ccloader.load(resArgs.url, resArgs.onProgess, finishCallback);\r\n                }\r\n            }\r\n        } else {\r\n            ccloader.loadResArray(resArgs.url, resArgs.type, resArgs.onProgess, finishCallback);\r\n        }\r\n    }\r\n\r\n    public static loadDir(url: string, onCompleted: CompletedCallback);\r\n    public static loadDir(url: string, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static loadDir(url: string, type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public static loadDir(url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static loadDir(bundle: string, url: string, onCompleted: CompletedCallback);\r\n    public static loadDir(bundle: string, url: string, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static loadDir(bundle: string, url: string, type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public static loadDir(bundle: string, url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static loadDir() {\r\n        let resArgs: LoadArgs = ResLoader.makeLoadArgs.apply(ResLoader, arguments);\r\n        let finishCallback = ResLoader.makeFinishCallback(resArgs);\r\n        let ccloader = ResLoader.getLoader();\r\n        ccloader.loadResDir(resArgs.url, resArgs.type, resArgs.onProgess, finishCallback);\r\n    }\r\n\r\n    public static release(url: string)\r\n    public static release(url: string, type: typeof cc.Asset)\r\n    public static release(url: string[])\r\n    public static release(url: string[], type: typeof cc.Asset)\r\n    public static release(bundle: string, url: string)\r\n    public static release(bundle: string, url: string, type: typeof cc.Asset)\r\n    public static release(bundle: string, url: string[])\r\n    public static release(bundle: string, url: string[], type: typeof cc.Asset)\r\n    public static release(asset: cc.Asset)\r\n    public static release(asset: cc.Asset[])\r\n    public static release() {\r\n        let resArgs: ReleaseArgs = ResLoader.makeReleaseArgs.apply(ResLoader, arguments);\r\n        if (resArgs.url instanceof Array) {\r\n            resArgs.url.forEach(element => {\r\n                if (resArgs.type) {\r\n                    ResManager.Instance.releaseAsset(ResLoader.getUuid(element, resArgs.type));\r\n                } else {\r\n                    ResManager.Instance.releaseAsset(element);\r\n                }\r\n            });\r\n        } else {\r\n            if (resArgs.type && typeof resArgs.url == \"string\") {\r\n                ResManager.Instance.releaseAsset(ResLoader.getUuid(resArgs.url, resArgs.type));\r\n            } else {\r\n                ResManager.Instance.releaseAsset(resArgs.url);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport let resLoader = ResLoader;"]}