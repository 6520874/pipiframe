{"version":3,"sources":["assets/Script/res/NodePool.ts"],"names":[],"mappings":";;;;AAAA,2CAA2C;AAE3C,MAAM;AACN,8CAA8C;AAC9C,MAAM;AACN,qBAAqB;AACrB,MAAM;AAEN,6EAA6E;AAE7E,0BAA0B;AAC1B,yCAAyC;AACzC,wCAAwC;AACxC,wCAAwC;AACxC,6CAA6C;AAC7C,sCAAsC;AACtC,6DAA6D;AAE7D,iDAAiD;AAEjD,UAAU;AACV,0DAA0D;AAC1D,iDAAiD;AACjD,wBAAwB;AACxB,oBAAoB;AACpB,UAAU;AACV,qCAAqC;AACrC,iEAAiE;AACjE,sBAAsB;AACtB,0CAA0C;AAC1C,qCAAqC;AACrC,4EAA4E;AAC5E,6CAA6C;AAC7C,YAAY;AAEZ,kDAAkD;AAClD,uCAAuC;AACvC,+DAA+D;AAC/D,yBAAyB;AACzB,6DAA6D;AAC7D,4CAA4C;AAC5C,4CAA4C;AAC5C,sDAAsD;AACtD,wBAAwB;AACxB,8BAA8B;AAC9B,oBAAoB;AACpB,gBAAgB;AAChB,wDAAwD;AACxD,gGAAgG;AAChG,gCAAgC;AAChC,0CAA0C;AAC1C,4CAA4C;AAC5C,oBAAoB;AACpB,wCAAwC;AACxC,mDAAmD;AACnD,oBAAoB;AACpB,gCAAgC;AAChC,sBAAsB;AACtB,YAAY;AACZ,gEAAgE;AAChE,QAAQ;AAER,UAAU;AACV,6BAA6B;AAC7B,UAAU;AACV,kCAAkC;AAClC,+BAA+B;AAC/B,2BAA2B;AAC3B,YAAY;AAEZ,wCAAwC;AACxC,wCAAwC;AACxC,mBAAmB;AACnB,mCAAmC;AACnC,gDAAgD;AAChD,YAAY;AACZ,QAAQ;AAER,UAAU;AACV,kBAAkB;AAClB,kCAAkC;AAClC,UAAU;AACV,uCAAuC;AACvC,6CAA6C;AAC7C,wEAAwE;AACxE,mCAAmC;AACnC,sBAAsB;AACtB,YAAY;AACZ,uDAAuD;AACvD,mCAAmC;AACnC,8BAA8B;AAC9B,mBAAmB;AACnB,2CAA2C;AAC3C,8BAA8B;AAC9B,sCAAsC;AACtC,YAAY;AACZ,QAAQ;AAER,UAAU;AACV,gBAAgB;AAChB,6BAA6B;AAC7B,UAAU;AACV,+CAA+C;AAC/C,wCAAwC;AACxC,QAAQ;AAER,UAAU;AACV,2BAA2B;AAC3B,UAAU;AACV,yBAAyB;AACzB,wDAAwD;AACxD,oEAAoE;AACpE,YAAY;AACZ,0DAA0D;AAC1D,QAAQ;AAER,UAAU;AACV,kBAAkB;AAClB,UAAU;AACV,yBAAyB;AACzB,uBAAuB;AACvB,0CAA0C;AAC1C,8BAA8B;AAC9B,YAAY;AACZ,mDAAmD;AACnD,kCAAkC;AAClC,2DAA2D;AAC3D,QAAQ;AACR,IAAI","file":"","sourceRoot":"/","sourcesContent":["// import { resLoader } from \"./ResLoader\";\r\n\r\n// /**\r\n//  * Prefab的实例对象管理，目标为减少instantiate的次数，复用Node\r\n//  * \r\n//  * 2020-1-19 by 宝爷\r\n//  */\r\n\r\n// export type NodePoolCallback = (error: Error, nodePool: NodePool) => void;\r\n \r\n// export class NodePool {\r\n//     private _isReady: boolean = false;\r\n//     private _createCount: number = 0;\r\n//     private _warterMark: number = 10;\r\n//     private _useKey: string = \"@NodePool\";\r\n//     private _res: cc.Prefab = null;\r\n//     private _nodes: Array<cc.Node> = new Array<cc.Node>();\r\n\r\n//     public isReady() { return this._isReady; }\r\n\r\n//     /**\r\n//      * 初始化NodePool，可以传入使用resloader加载的prefab，或者传入url异步加载\r\n//      * 如果使用url来初始化，需要检查isReady，否则获取node会返回null\r\n//      * @param prefab \r\n//      * @param url\r\n//      */\r\n//     public init(prefab: cc.Prefab)\r\n//     public init(url: string, finishCallback: NodePoolCallback)\r\n//     public init() {\r\n//         let urlOrPrefab = arguments[0];\r\n//         var finishCallback = null;\r\n//         if (arguments.length == 2 && typeof arguments[1] == \"function\") {\r\n//             finishCallback = arguments[1];\r\n//         }\r\n\r\n//         if (urlOrPrefab instanceof cc.Prefab) {\r\n//             this._res = urlOrPrefab;\r\n//             let url = resLoader.getResKeyByAsset(this._res);\r\n//             if (url) {\r\n//                 if (resLoader.addUse(url, this._useKey)) {\r\n//                     this._isReady = true;\r\n//                     if (finishCallback) {\r\n//                         finishCallback(null, this);\r\n//                     }\r\n//                     return;\r\n//                 }\r\n//             }\r\n//         } else if (typeof arguments[0] == \"string\") {\r\n//             resLoader.loadRes(arguments[0], cc.Prefab, (error: Error, prefab: cc.Prefab) => {\r\n//                 if (!error) {\r\n//                     this._res = prefab;\r\n//                     this._isReady = true;\r\n//                 }\r\n//                 if (finishCallback) {\r\n//                     finishCallback(error, this);\r\n//                 }\r\n//             }, this._useKey);\r\n//             return;\r\n//         }\r\n//         console.error(`NodePool init error ${arguments[0]}`);\r\n//     }\r\n\r\n//     /**\r\n//      * 获取或创建一个Prefab实例Node\r\n//      */\r\n//     public getNode(): cc.Node {\r\n//         if (!this.isReady) {\r\n//             return null;\r\n//         }\r\n\r\n//         if (this._nodes.length > 0) {\r\n//             return this._nodes.pop();\r\n//         } else {\r\n//             this._createCount++;\r\n//             return cc.instantiate(this._res);\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * 回收Node实例\r\n//      * @param node 要回收的Prefab实例\r\n//      */\r\n//     public freeNode(node: cc.Node) {\r\n//         if (!(node && cc.isValid(node))) {\r\n//             cc.error('[ERROR] PrefabPool: freePrefab: isValid node');\r\n//             this._createCount--;\r\n//             return;\r\n//         }\r\n//         if (this._warterMark < this._nodes.length) {\r\n//             this._createCount--;\r\n//             node.destroy();\r\n//         } else {\r\n//             node.removeFromParent(true);\r\n//             node.cleanup();\r\n//             this._nodes.push(node);\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * 设置回收水位\r\n//      * @param waterMakr 水位\r\n//      */\r\n//     public setWaterMark(waterMakr: number) {\r\n//         this._warterMark = waterMakr;\r\n//     }\r\n\r\n//     /**\r\n//      * 池子里的prefab是否都没有使用\r\n//      */\r\n//     public isUnuse() {\r\n//         if (this._nodes.length > this._createCount) {\r\n//             cc.error('PrefabPool: _nodes.length > _createCount');\r\n//         }\r\n//         return this._nodes.length == this._createCount;\r\n//     }\r\n\r\n//     /**\r\n//      * 清空prefab\r\n//      */\r\n//     public destory() {\r\n//         // 清空节点、回收资源\r\n//         for (let node of this._nodes) {\r\n//             node.destroy();\r\n//         }\r\n//         this._createCount -= this._nodes.length;\r\n//         this._nodes.length = 0;\r\n//         resLoader.releaseAsset(this._res, this._useKey);\r\n//     }\r\n// }"]}