{"version":3,"sources":["assets/Script/res/ResKeeper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA4E;AAC5E;;;;;;;GAOG;AACK,IAAA,+BAAO,CAAmB;AAGlC;IAA+B,6BAAY;IAD3C;QAAA,qEAgFC;QA7EW,cAAQ,GAAG,IAAI,GAAG,EAAY,CAAC;;IA6E3C,CAAC;IAnDU,wBAAI,GAAX;QAAA,iBAsBC;QArBG,gBAAgB;QAChB,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,UAAU,EAAE;YAC9E,OAAO,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;YAC1D,OAAO;SACV;QACD,kBAAkB;QAClB,IAAI,cAAc,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACrD,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,UAAC,KAAK,EAAE,QAAQ;YAC9C,IAAI,CAAC,KAAK,EAAE;gBACR,IAAI,QAAQ,YAAY,KAAK,EAAE;oBAC3B,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;wBACpB,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBAC7B,CAAC,CAAC,CAAC;iBACN;qBAAM;oBACH,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;iBAC7B;aACJ;YACD,cAAc,EAAE,CAAC;QACrB,CAAC,CAAA;QACD,SAAS;QACT,mBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAS,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACI,8BAAU,GAAjB,UAAkB,KAAe;QAC7B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC3B,KAAK,CAAC,MAAM,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC5B;IACL,CAAC;IAED;;OAEG;IACI,6BAAS,GAAhB;QACI,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,iCAAa,GAApB;QACI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;YACzB,OAAO,CAAC,MAAM,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IA9EQ,SAAS;QADrB,OAAO;OACK,SAAS,CA+ErB;IAAD,gBAAC;CA/ED,AA+EC,CA/E8B,EAAE,CAAC,SAAS,GA+E1C;AA/EY,8BAAS","file":"","sourceRoot":"/","sourcesContent":["import ResLoader, { CompletedCallback, ProcessCallback } from \"./ResLoader\";\r\n/**\r\n * 资源引用类\r\n * 1. 提供加载功能，并记录加载过的资源\r\n * 2. 在node释放时自动清理加载过的资源\r\n * 3. 支持手动添加记录\r\n * \r\n * 2019-12-13 by 宝爷\r\n */\r\nconst { ccclass } = cc._decorator;\r\n\r\n@ccclass\r\nexport class ResKeeper extends cc.Component {\r\n\r\n    private resCache = new Set<cc.Asset>();\r\n\r\n    /**\r\n     * 开始加载资源\r\n     * @param bundle        assetbundle的路径\r\n     * @param url           资源url或url数组\r\n     * @param type          资源类型，默认为null\r\n     * @param onProgess     加载进度回调\r\n     * @param onCompleted   加载完成回调\r\n     */\r\n    public load(url: string, onCompleted: CompletedCallback);\r\n    public load(url: string, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public load(url: string, type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public load(url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public load(url: string[], onCompleted: CompletedCallback);\r\n    public load(url: string[], onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public load(url: string[], type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public load(url: string[], type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public load(bundle: string, url: string, onCompleted: CompletedCallback);\r\n    public load(bundle: string, url: string, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public load(bundle: string, url: string, type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public load(bundle: string, url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public load(bundle: string, url: string[], onCompleted: CompletedCallback);\r\n    public load(bundle: string, url: string[], onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public load(bundle: string, url: string[], type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public load(bundle: string, url: string[], type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public load() {\r\n        // 最后一个参数是加载完成回调\r\n        if (arguments.length < 2 || typeof arguments[arguments.length - 1] != \"function\") {\r\n            console.error(`load faile, completed callback not found`);\r\n            return;\r\n        }\r\n        // 包装完成回调，添加自动缓存功能\r\n        let finishCallback = arguments[arguments.length - 1];\r\n        arguments[arguments.length - 1] = (error, resource) => {\r\n            if (!error) {\r\n                if (resource instanceof Array) {\r\n                    resource.forEach(element => {\r\n                        this.cacheAsset(element);\r\n                    });\r\n                } else {\r\n                    this.cacheAsset(resource);\r\n                }\r\n            }\r\n            finishCallback();\r\n        }\r\n        // 调用加载接口\r\n        ResLoader.load.apply(ResLoader, arguments);\r\n    }\r\n\r\n    /**\r\n     * 缓存资源\r\n     * @param asset \r\n     */\r\n    public cacheAsset(asset: cc.Asset) {\r\n        if (!this.resCache.has(asset)) {\r\n            asset.addRef();\r\n            this.resCache.add(asset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 组件销毁时自动释放所有keep的资源\r\n     */\r\n    public onDestroy() {\r\n        this.releaseAssets();\r\n    }\r\n\r\n    /**\r\n     * 释放资源，组件销毁时自动调用\r\n     */\r\n    public releaseAssets() {\r\n        this.resCache.forEach(element => {\r\n            element.decRef();\r\n        });\r\n        this.resCache.clear();\r\n    }\r\n}"]}