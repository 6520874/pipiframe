{"version":3,"sources":["assets/Script/res/ResPool.ts"],"names":[],"mappings":";;;;AAAA,uGAAuG;AAEvG,MAAM;AACN,yBAAyB;AACzB,uCAAuC;AACvC,uCAAuC;AACvC,MAAM;AACN,qBAAqB;AACrB,MAAM;AAEN,yBAAyB;AACzB,+BAA+B;AAC/B,oCAAoC;AACpC,uCAAuC;AAEvC,sBAAsB;AACtB,8DAA8D;AAC9D,QAAQ;AAER,UAAU;AACV,gBAAgB;AAChB,oCAAoC;AACpC,2CAA2C;AAC3C,qCAAqC;AACrC,qCAAqC;AACrC,uDAAuD;AACvD,UAAU;AACV,iDAAiD;AACjD,iFAAiF;AACjF,6GAA6G;AAC7G,wEAAwE;AACxE,wGAAwG;AACxG,oIAAoI;AACpI,yBAAyB;AACzB,4BAA4B;AAC5B,uFAAuF;AACvF,mDAAmD;AACnD,mEAAmE;AACnE,8DAA8D;AAC9D,mCAAmC;AACnC,0CAA0C;AAC1C,gBAAgB;AAChB,mCAAmC;AACnC,kDAAkD;AAClD,gBAAgB;AAChB,aAAa;AACb,QAAQ;AAER,UAAU;AACV,gBAAgB;AAChB,6BAA6B;AAC7B,UAAU;AACV,+CAA+C;AAC/C,uCAAuC;AACvC,QAAQ;AAER,UAAU;AACV,6DAA6D;AAC7D,qBAAqB;AACrB,UAAU;AACV,gDAAgD;AAChD,wDAAwD;AACxD,0CAA0C;AAC1C,+BAA+B;AAC/B,gBAAgB;AAChB,YAAY;AACZ,wBAAwB;AACxB,QAAQ;AAER,UAAU;AACV,sBAAsB;AACtB,qBAAqB;AACrB,UAAU;AACV,0CAA0C;AAC1C,6EAA6E;AAC7E,mDAAmD;AACnD,YAAY;AACZ,QAAQ;AAER,UAAU;AACV,gCAAgC;AAChC,UAAU;AACV,2BAA2B;AAC3B,qDAAqD;AACrD,0CAA0C;AAC1C,YAAY;AACZ,QAAQ;AAER,UAAU;AACV,gBAAgB;AAChB,UAAU;AACV,qCAAqC;AACrC,yDAAyD;AACzD,uEAAuE;AACvE,qEAAqE;AACrE,2CAA2C;AAC3C,gBAAgB;AAChB,YAAY;AACZ,QAAQ;AAER,UAAU;AACV,oBAAoB;AACpB,UAAU;AACV,yBAAyB;AACzB,yDAAyD;AACzD,iEAAiE;AACjE,YAAY;AACZ,iCAAiC;AACjC,QAAQ;AAER,UAAU;AACV,qBAAqB;AACrB,UAAU;AACV,sBAAsB;AACtB,mCAAmC;AACnC,QAAQ;AACR,IAAI","file":"","sourceRoot":"/","sourcesContent":["// import ResLoader, { resLoader, CompletedCallback, ProcessCallback, LoadResArgs } from \"./ResLoader\";\r\n\r\n// /**\r\n//  * ResPool，可提高资源缓存的效率，\r\n//  * 当超过警戒水位时，每次加载新的资源都会自动检查可释放的资源进行释放\r\n//  * 也可以手动调用releaseUnuseRes，自动释放可释放的资源\r\n//  * \r\n//  * 2020-1-19 by 宝爷\r\n//  */\r\n\r\n// export class ResPool {\r\n//     private _useKey: string;\r\n//     private _urls: string[] = [];\r\n//     private _waterMark: number = 32;\r\n\r\n//     constructor() {\r\n//         this._useKey = `@ResPool${resLoader.nextUseKey()}`;\r\n//     }\r\n\r\n//     /**\r\n//      * 开始加载资源\r\n//      * @param url           资源url\r\n//      * @param type          资源类型，默认为null\r\n//      * @param onProgess     加载进度回调\r\n//      * @param onCompleted   加载完成回调\r\n//      * @param use           资源使用key，根据makeUseKey方法生成\r\n//      */\r\n//     public loadRes(url: string, use?: string);\r\n//     public loadRes(url: string, onCompleted: CompletedCallback, use?: string);\r\n//     public loadRes(url: string, onProgess: ProcessCallback, onCompleted: CompletedCallback, use?: string);\r\n//     public loadRes(url: string, type: typeof cc.Asset, use?: string);\r\n//     public loadRes(url: string, type: typeof cc.Asset, onCompleted: CompletedCallback, use?: string);\r\n//     public loadRes(url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback, use?: string);\r\n//     public loadRes() {\r\n//         this.autoCheck();\r\n//         let resArgs: LoadResArgs = ResLoader.makeLoadResArgs.apply(this, arguments);\r\n//         let SaveCompleted = resArgs.onCompleted;\r\n//         resArgs.onCompleted = (error: Error, resource: any) => {\r\n//             let url = resLoader.getResKeyByAsset(resource);\r\n//             if (!error && url) {\r\n//                 this.addNewResUrl(url);\r\n//             }\r\n//             if (SaveCompleted) {\r\n//                 SaveCompleted(error, resource);\r\n//             }\r\n//         };\r\n//     }\r\n\r\n//     /**\r\n//      * 设置监控水位\r\n//      * @param waterMakr 水位\r\n//      */\r\n//     public setWaterMark(waterMakr: number) {\r\n//         this._waterMark = waterMakr;\r\n//     }\r\n\r\n//     /**\r\n//      * 是否缓存了某url（这里的url为resloader的_resMap的key，可能不等于加载的url）\r\n//      * @param url \r\n//      */\r\n//     public hasResUrl(url: string) : boolean {\r\n//         for (let i = 0; i < this._urls.length; ++i) {\r\n//             if (url == this._urls[i]) {\r\n//                 return true;\r\n//             }\r\n//         }\r\n//         return false;\r\n//     }\r\n\r\n//     /**\r\n//      * 加载完成后添加一个use\r\n//      * @param url \r\n//      */\r\n//     private addNewResUrl(url: string) {\r\n//         if (!this.hasResUrl(url) && resLoader.addUse(url, this._useKey)) {\r\n//             this._urls[this._urls.length] = url;\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * 自动检测是否需要释放资源，需要则自动释放资源\r\n//      */\r\n//     public autoCheck() {\r\n//         if (this._urls.length > this._waterMark) {\r\n//             this.autoReleaseUnuseRes();\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * 自动释放资源\r\n//      */\r\n//     public autoReleaseUnuseRes() {\r\n//         for (let i = this._urls.length; i >= 0; --i) {\r\n//             if (resLoader.canRelease(this._urls[i], this._useKey)) {\r\n//                 resLoader.releaseRes(this._urls[i], this._useKey);\r\n//                 this._urls.splice(i, 1);\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * 清空该ResPool\r\n//      */\r\n//     public destroy() {\r\n//         for (let i = this._urls.length; i >= 0; --i) {\r\n//             resLoader.releaseRes(this._urls[i], this._useKey);\r\n//         }\r\n//         this._urls.length = 0;\r\n//     }\r\n\r\n//     /**\r\n//      * 调试打印缓存的urls\r\n//      */\r\n//     public dump() {\r\n//         console.log(this._urls);\r\n//     }\r\n// }\r\n"]}