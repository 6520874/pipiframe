{"version":3,"sources":["assets/Script/network/WebSock.ts"],"names":[],"mappings":";;;;;;AAEA;;;;;;;EAOE;AAEF;IAAA;QACY,QAAG,GAAc,IAAI,CAAC,CAAc,cAAc;QAE1D,gBAAW,GAAoB,IAAI,CAAC;QACpC,cAAS,GAAkB,IAAI,CAAC;QAChC,YAAO,GAAoB,IAAI,CAAC;QAChC,aAAQ,GAAoB,IAAI,CAAC;IA2CrC,CAAC;IAzCG,yBAAO,GAAP,UAAQ,OAAY;QAApB,iBA2BC;QA1BG,IAAI,IAAI,CAAC,GAAG,EAAE;YACV,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,KAAK,SAAS,CAAC,UAAU,EAAE;gBAC9C,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAA;gBACzD,OAAO,KAAK,CAAC;aAChB;SACJ;QAED,IAAI,GAAG,GAAG,IAAI,CAAC;QACf,IAAG,OAAO,CAAC,GAAG,EAAE;YACZ,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;SACrB;aAAM;YACH,IAAI,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;YACpB,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACxB,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YAChC,GAAG,GAAM,QAAQ,WAAM,EAAE,SAAI,IAAM,CAAC;SACvC;QAED,IAAI,CAAC,GAAG,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC;QAC9E,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,UAAC,KAAK;YACvB,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC;QACF,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QACjC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,sBAAI,GAAJ,UAAK,MAAe;QAChB,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,IAAI,SAAS,CAAC,IAAI,EACzC;YACI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACtB,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,uBAAK,GAAL,UAAM,IAAa,EAAE,MAAe;QAChC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACjC,CAAC;IACL,cAAC;AAAD,CAjDA,AAiDC,IAAA;AAjDY,0BAAO","file":"","sourceRoot":"/","sourcesContent":["import { ISocket, NetData } from \"./NetInterface\";\n\n/*\n*   WebSocket封装\n*   1. 连接/断开相关接口\n*   2. 网络异常回调\n*   3. 数据发送与接收\n*   \n*   2018-5-14 by 宝爷\n*/\n\nexport class WebSock implements ISocket {\n    private _ws: WebSocket = null;              // websocket对象\n\n    onConnected: (event) => void = null;\n    onMessage: (msg) => void = null;\n    onError: (event) => void = null;\n    onClosed: (event) => void = null;\n\n    connect(options: any) {\n        if (this._ws) {\n            if (this._ws.readyState === WebSocket.CONNECTING) {\n                console.log(\"websocket connecting, wait for a moment...\")\n                return false;\n            }\n        }\n\n        let url = null;\n        if(options.url) {\n            url = options.url;\n        } else {\n            let ip = options.ip;\n            let port = options.port;\n            let protocol = options.protocol;\n            url = `${protocol}://${ip}:${port}`;    \n        }\n\n        this._ws = new WebSocket(url);\n        this._ws.binaryType = options.binaryType ? options.binaryType : \"arraybuffer\";\n        this._ws.onmessage = (event) => {\n            this.onMessage(event.data);\n        };\n        this._ws.onopen = this.onConnected;\n        this._ws.onerror = this.onError;\n        this._ws.onclose = this.onClosed;\n        return true;\n    }\n\n    send(buffer: NetData) {\n        if (this._ws.readyState == WebSocket.OPEN)\n        {\n            this._ws.send(buffer);\n            return true;\n        }\n        return false;\n    }\n\n    close(code?: number, reason?: string) {\n        this._ws.close(code, reason);\n    }\n}"]}