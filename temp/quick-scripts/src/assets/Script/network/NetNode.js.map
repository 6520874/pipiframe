{"version":3,"sources":["assets/Script/network/NetNode.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ISocket, INetworkTips, IProtocolHelper, RequestObject, CallbackObject, NetData, NetCallFunc } from \"./NetInterface\";\n\n/*\n*   CocosCreator网络节点基类，以及网络相关接口定义\n*   1. 网络连接、断开、请求发送、数据接收等基础功能\n*   2. 心跳机制\n*   3. 断线重连 + 请求重发\n*   4. 调用网络屏蔽层\n*\n*   2018-5-7 by 宝爷\n*/\n\ntype ExecuterFunc = (callback: CallbackObject, buffer: NetData) => void;\ntype CheckFunc = (checkedFunc : VoidFunc ) => void;\ntype VoidFunc = () => void;\ntype BoolFunc = () => boolean;\n\nexport enum NetTipsType {\n    Connecting,\n    ReConnecting,\n    Requesting,\n}\n\nexport enum NetNodeState {\n    Closed,                     // 已关闭\n    Connecting,                 // 连接中\n    Checking,                   // 验证中\n    Working,                    // 可传输数据\n}\n\nexport interface NetConnectOptions {\n    host?: string,              // 地址\n    port?: number,              // 端口\n    url?: string,               // url，与地址+端口二选一\n    autoReconnect?: number,     // -1 永久重连，0不自动重连，其他正整数为自动重试次数\n}\n\nexport class NetNode {\n    protected _connectOptions: NetConnectOptions = null;\n    protected _autoReconnect: number = 0;\n    protected _isSocketInit: boolean = false;                               // Socket是否初始化过\n    protected _isSocketOpen: boolean = false;                               // Socket是否连接成功过\n    protected _state: NetNodeState = NetNodeState.Closed;                   // 节点当前状态\n    protected _socket: ISocket = null;                                      // Socket对象（可能是原生socket、websocket、wx.socket...)\n\n    protected _networkTips: INetworkTips = null;                            // 网络提示ui对象（请求提示、断线重连提示等）\n    protected _protocolHelper: IProtocolHelper = null;                      // 包解析对象\n    protected _connectedCallback: CheckFunc = null;                         // 连接完成回调\n    protected _disconnectCallback: BoolFunc = null;                         // 断线回调\n    protected _callbackExecuter: ExecuterFunc = null;                       // 回调执行\n\n    protected _keepAliveTimer: any = null;                                  // 心跳定时器\n    protected _receiveMsgTimer: any = null;                                 // 接收数据定时器\n    protected _reconnectTimer: any = null;                                  // 重连定时器\n    protected _heartTime: number = 10000;                                   // 心跳间隔\n    protected _receiveTime: number = 6000000;                               // 多久没收到数据断开\n    protected _reconnetTimeOut: number = 8000000;                           // 重连间隔\n    protected _requests: RequestObject[] = Array<RequestObject>();          // 请求列表\n    protected _listener: { [key: number]: CallbackObject[] } = {}           // 监听者列表\n\n    /********************** 网络相关处理 *********************/\n    public init(socket: ISocket, protocol: IProtocolHelper, networkTips: any = null, execFunc : ExecuterFunc = null) {\n        console.log(`NetNode init socket`);\n        this._socket = socket;\n        this._protocolHelper = protocol;\n        this._networkTips = networkTips;\n        this._callbackExecuter = execFunc ? execFunc : (callback: CallbackObject, buffer: NetData) => {\n            callback.callback.call(callback.target, 0, buffer);\n        }\n    }\n\n    public connect(options: NetConnectOptions): boolean {\n        if (this._socket && this._state == NetNodeState.Closed) {\n            if (!this._isSocketInit) {\n                this.initSocket();\n            }\n            this._state = NetNodeState.Connecting;\n            if (!this._socket.connect(options)) {\n                this.updateNetTips(NetTipsType.Connecting, false);\n                return false;\n            }\n\n            if (this._connectOptions == null) {\n                this._autoReconnect = options.autoReconnect;\n            }\n            this._connectOptions = options;\n            this.updateNetTips(NetTipsType.Connecting, true);\n            return true;\n        }\n        return false;\n    }\n\n    protected initSocket() {\n        this._socket.onConnected = (event) => { this.onConnected(event) };\n        this._socket.onMessage = (msg) => { this.onMessage(msg) };\n        this._socket.onError = (event) => { this.onError(event) };\n        this._socket.onClosed = (event) => { this.onClosed(event) };\n        this._isSocketInit = true;\n    }\n\n    protected updateNetTips(tipsType: NetTipsType, isShow: boolean) {\n        if (this._networkTips) {\n            if (tipsType == NetTipsType.Requesting) {\n                this._networkTips.requestTips(isShow);\n            } else if (tipsType == NetTipsType.Connecting) {\n                this._networkTips.connectTips(isShow);\n            } else if (tipsType == NetTipsType.ReConnecting) {\n                this._networkTips.reconnectTips(isShow);\n            }\n        }\n    }\n\n    // 网络连接成功\n    protected onConnected(event) {\n        console.log(\"NetNode onConnected!\")\n        this._isSocketOpen = true;\n        // 如果设置了鉴权回调，在连接完成后进入鉴权阶段，等待鉴权结束\n        if (this._connectedCallback !== null) {\n            this._state = NetNodeState.Checking;\n            this._connectedCallback(() => { this.onChecked() });\n        } else {\n            this.onChecked();\n        }\n        console.log(\"NetNode onConnected! state =\" + this._state);\n    }\n\n    // 连接验证成功，进入工作状态\n    protected onChecked() {\n        console.log(\"NetNode onChecked!\")\n        this._state = NetNodeState.Working;\n        // 关闭连接或重连中的状态显示\n        this.updateNetTips(NetTipsType.Connecting, false);\n        this.updateNetTips(NetTipsType.ReConnecting, false);\n\n        // 重发待发送信息\n        console.log(`NetNode flush ${this._requests.length} request`)\n        if (this._requests.length > 0) {\n            for (var i = 0; i < this._requests.length;) {\n                let req = this._requests[i];\n                this._socket.send(req.buffer);\n                if (req.rspObject == null || req.rspCmd <= 0) {\n                    this._requests.splice(i, 1);\n                } else {\n                    ++i;\n                }\n            }\n            // 如果还有等待返回的请求，启动网络请求层\n            this.updateNetTips(NetTipsType.Requesting, this.request.length > 0);\n        }\n    }\n\n    // 接收到一个完整的消息包\n    protected onMessage(msg): void {\n        // console.log(`NetNode onMessage status = ` + this._state);\n        // 进行头部的校验（实际包长与头部长度是否匹配）\n        if (!this._protocolHelper.checkPackage(msg)) {\n            console.error(`NetNode checkHead Error`);\n            return;\n        }\n        // 接受到数据，重新定时收数据计时器\n        this.resetReceiveMsgTimer();\n        // 重置心跳包发送器\n        this.resetHearbeatTimer();\n        // 触发消息执行\n        let rspCmd = this._protocolHelper.getPackageId(msg);\n        console.log(`NetNode onMessage rspCmd = ` + rspCmd);\n        // 优先触发request队列\n        if (this._requests.length > 0) {\n            for (let reqIdx in this._requests) {\n                let req = this._requests[reqIdx];\n                if (req.rspCmd == rspCmd) {\n                    console.log(`NetNode execute request rspcmd ${rspCmd}`);\n                    this._callbackExecuter(req.rspObject, msg);\n                    this._requests.splice(parseInt(reqIdx), 1);\n                    break;\n                }\n            }\n            console.log(`NetNode still has ${this._requests.length} request watting`);\n            if (this._requests.length == 0) {\n                this.updateNetTips(NetTipsType.Requesting, false);\n            }\n        }\n\n        let listeners = this._listener[rspCmd];\n        if (null != listeners) {\n            for (const rsp of listeners) {\n                console.log(`NetNode execute listener cmd ${rspCmd}`);\n                this._callbackExecuter(rsp, msg);\n            }\n        }\n    }\n\n    protected onError(event) {\n        console.error(event);\n    }\n\n    protected onClosed(event) {\n        this.clearTimer();\n\n        // 执行断线回调，返回false表示不进行重连\n        if (this._disconnectCallback && !this._disconnectCallback()) {\n            console.log(`disconnect return!`)\n            return;\n        }\n\n        // 自动重连\n        if (this.isAutoReconnect()) {\n            this.updateNetTips(NetTipsType.ReConnecting, true);\n            this._reconnectTimer = setTimeout(() => {\n                this._socket.close();\n                this._state = NetNodeState.Closed;\n                this.connect(this._connectOptions);\n                if (this._autoReconnect > 0) {\n                    this._autoReconnect -= 1;\n                }\n            }, this._reconnetTimeOut);\n        } else {\n            this._state = NetNodeState.Closed;\n        }\n    }\n\n    public close(code?: number, reason?: string) {\n        this.clearTimer();\n        this._listener = {};\n        this._requests.length = 0;\n        if (this._networkTips) {\n            this._networkTips.connectTips(false);\n            this._networkTips.reconnectTips(false);\n            this._networkTips.requestTips(false);\n        }\n        if (this._socket) {\n            this._socket.close(code, reason);\n        } else {\n            this._state = NetNodeState.Closed;\n        }\n    }\n\n    // 只是关闭Socket套接字（仍然重用缓存与当前状态）\n    public closeSocket(code?: number, reason?: string) {\n        if (this._socket) {\n            this._socket.close(code, reason);\n        }\n    }\n\n    // 发起请求，如果当前处于重连中，进入缓存列表等待重连完成后发送\n    public send(buf: NetData, force: boolean = false): boolean {\n        if (this._state == NetNodeState.Working || force) {\n            console.log(`socket send ...`);\n            return this._socket.send(buf);\n        } else if (this._state == NetNodeState.Checking ||\n            this._state == NetNodeState.Connecting) {\n            this._requests.push({\n                buffer: buf,\n                rspCmd: 0,\n                rspObject: null\n            });\n            console.log(\"NetNode socket is busy, push to send buffer, current state is \" + this._state);\n            return true;\n        } else {\n            console.error(\"NetNode request error! current state is \" + this._state);\n            return false;\n        }\n    }\n\n    // 发起请求，并进入缓存列表\n    public request(buf: NetData, rspCmd: number, rspObject: CallbackObject, showTips: boolean = true, force: boolean = false) {\n        if (this._state == NetNodeState.Working || force) {\n            this._socket.send(buf);\n        }\n        console.log(`NetNode request with timeout for ${rspCmd}`);\n        // 进入发送缓存列表\n        this._requests.push({\n            buffer: buf, rspCmd, rspObject\n        });\n        // 启动网络请求层\n        if (showTips) {\n            this.updateNetTips(NetTipsType.Requesting, true);\n        }\n    }\n\n    // 唯一request，确保没有同一响应的请求（避免一个请求重复发送，netTips界面的屏蔽也是一个好的方法）\n    public requestUnique(buf: NetData, rspCmd: number, rspObject: CallbackObject, showTips: boolean = true, force: boolean = false): boolean {\n        for (let i = 0; i < this._requests.length; ++i) {\n            if (this._requests[i].rspCmd == rspCmd) {\n                console.log(`NetNode requestUnique faile for ${rspCmd}`);\n                return false;\n            }\n        }\n        this.request(buf, rspCmd, rspObject, showTips, force);\n        return true;\n    }\n\n    /********************** 回调相关处理 *********************/\n    public setResponeHandler(cmd: number, callback: NetCallFunc, target?: any): boolean {\n        if (callback == null) {\n            console.error(`NetNode setResponeHandler error ${cmd}`);\n            return false;\n        }\n        this._listener[cmd] = [{ target, callback }];\n        return true;\n    }\n\n    public addResponeHandler(cmd: number, callback: NetCallFunc, target?: any): boolean {\n        if (callback == null) {\n            console.error(`NetNode addResponeHandler error ${cmd}`);\n            return false;\n        }\n        let rspObject = { target, callback };\n        if (null == this._listener[cmd]) {\n            this._listener[cmd] = [rspObject];\n        } else {\n            let index = this.getNetListenersIndex(cmd, rspObject);\n            if (-1 == index) {\n                this._listener[cmd].push(rspObject);\n            }\n        }\n        return true;\n    }\n\n    public removeResponeHandler(cmd: number, callback: NetCallFunc, target?: any) {\n        if (null != this._listener[cmd] && callback != null) {\n            let index = this.getNetListenersIndex(cmd, { target, callback });\n            if (-1 != index) {\n                this._listener[cmd].splice(index, 1);\n            }\n        }\n    }\n\n    public cleanListeners(cmd: number = -1) {\n        if (cmd == -1) {\n            this._listener = {}\n        } else {\n            this._listener[cmd] = null;\n        }\n    }\n\n    protected getNetListenersIndex(cmd: number, rspObject: CallbackObject): number {\n        let index = -1;\n        for (let i = 0; i < this._listener[cmd].length; i++) {\n            let iterator = this._listener[cmd][i];\n            if (iterator.callback == rspObject.callback\n                && iterator.target == rspObject.target) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n\n    /********************** 心跳、超时相关处理 *********************/\n    protected resetReceiveMsgTimer() {\n        if (this._receiveMsgTimer !== null) {\n            clearTimeout(this._receiveMsgTimer);\n        }\n\n        this._receiveMsgTimer = setTimeout(() => {\n            console.warn(\"NetNode recvieMsgTimer close socket!\");\n            this._socket.close();\n        }, this._receiveTime);\n    }\n\n    protected resetHearbeatTimer() {\n        if (this._keepAliveTimer !== null) {\n            clearTimeout(this._keepAliveTimer);\n        }\n\n        this._keepAliveTimer = setTimeout(() => {\n            console.log(\"NetNode keepAliveTimer send Hearbeat\")\n            this.send(this._protocolHelper.getHearbeat());\n        }, this._heartTime);\n    }\n\n    protected clearTimer() {\n        if (this._receiveMsgTimer !== null) {\n            clearTimeout(this._receiveMsgTimer);\n        }\n        if (this._keepAliveTimer !== null) {\n            clearTimeout(this._keepAliveTimer);\n        }\n        if (this._reconnectTimer !== null) {\n            clearTimeout(this._reconnectTimer);\n        }\n    }\n\n    public isAutoReconnect() {\n        return this._autoReconnect != 0;\n    }\n\n    public rejectReconnect() {\n        this._autoReconnect = 0;\n        this.clearTimer();\n    }\n}"]}