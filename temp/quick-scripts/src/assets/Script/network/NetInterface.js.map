{"version":3,"sources":["assets/Script/network/NetInterface.ts"],"names":[],"mappings":";;;;;AACA;;;;EAIE;;AA2BF,YAAY;AACZ;IAAA;IAiBA,CAAC;IAhBG,sCAAU,GAAV;QACI,OAAO,CAAC,CAAC;IACb,CAAC;IACD,uCAAW,GAAX;QACI,OAAO,EAAE,CAAC;IACd,CAAC;IACD,yCAAa,GAAb,UAAc,GAAY;QAEtB,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;IACjC,CAAC;IACD,wCAAY,GAAZ,UAAa,GAAY;QACrB,OAAO,IAAI,CAAC;IAChB,CAAC;IACD,wCAAY,GAAZ,UAAa,GAAY;QACrB,OAAO,CAAC,CAAC;IACb,CAAC;IACL,wBAAC;AAAD,CAjBA,AAiBC,IAAA;AAjBY,8CAAiB","file":"","sourceRoot":"/","sourcesContent":["\n/*\n*   网络相关接口定义\n*   \n*   2019-10-8 by 宝爷\n*/\n\nexport type NetData = (string | ArrayBufferLike | Blob | ArrayBufferView);\nexport type NetCallFunc = (cmd: number, data: any) => void;\n\n// 回调对象\nexport interface CallbackObject {\n    target: any,                // 回调对象，不为null时调用target.callback(xxx)\n    callback: NetCallFunc,      // 回调函数\n}\n\n// 请求对象\nexport interface RequestObject {\n    buffer: NetData,            // 请求的Buffer\n    rspCmd: number,             // 等待响应指令\n    rspObject: CallbackObject,  // 等待响应的回调对象\n}\n\n// 协议辅助接口\nexport interface IProtocolHelper {\n    getHeadlen(): number;                   // 返回包头长度\n    getHearbeat(): NetData;                 // 返回一个心跳包\n    getPackageLen(msg: NetData): number;    // 返回整个包的长度\n    checkPackage(msg: NetData): boolean;    // 检查包数据是否合法\n    getPackageId(msg: NetData): number;     // 返回包的id或协议类型\n}\n\n// 默认字符串协议对象\nexport class DefStringProtocol implements IProtocolHelper {\n    getHeadlen(): number {\n        return 0;\n    }\n    getHearbeat(): NetData {\n        return \"\";\n    }\n    getPackageLen(msg: NetData): number\n    {\n        return msg.toString().length;\n    }\n    checkPackage(msg: NetData): boolean {\n        return true;\n    }\n    getPackageId(msg: NetData): number {\n        return 0;\n    }\n}\n\n// Socket接口\nexport interface ISocket {\n    onConnected: (event) => void;           // 连接回调\n    onMessage: (msg: NetData) => void;      // 消息回调\n    onError: (event) => void;               // 错误回调\n    onClosed: (event) => void;              // 关闭回调\n    \n    connect(options: any);                  // 连接接口\n    send(buffer: NetData);                  // 数据发送接口\n    close(code?: number, reason?: string);  // 关闭接口\n}\n\n// 网络提示接口\nexport interface INetworkTips {\n    connectTips(isShow: boolean): void;\n    reconnectTips(isShow: boolean): void;\n    requestTips(isShow: boolean): void;\n}\n"]}