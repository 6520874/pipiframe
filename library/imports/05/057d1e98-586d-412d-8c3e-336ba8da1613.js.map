{"version":3,"sources":["assets/Script/res/ResManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * cc.Asset的管理器\r\n * 1. 对cc.Asset进行注入，扩展其addRef和decRef方法，使其支持引用计数\r\n * 2. 对cc.Asset进行资源依赖管理\r\n * 3. 接管场景切换时，资源的引用管理，避免无引用计数的场景依赖被意外释放\r\n * \r\n * 2021-1-21 by 宝爷\r\n */\r\n\r\nimport { ResKeeper } from \"./ResKeeper\";\r\nimport { ResUtil } from \"./ResUtil\";\r\n\r\nlet loader: any = cc.loader;\r\n\r\nexport default class ResManager {\r\n    private static instance: ResManager;\r\n    private defaultKeeper: ResKeeper = new ResKeeper();\r\n    private persistDepends: Set<string> = new Set<string>();\r\n    private sceneDepends: string[] = null;\r\n    private lastScene = null;\r\n\r\n    /**\r\n     * 获取当前场景的持久节点应用的资源\r\n     */\r\n    private getPersistDepends() : Set<string> {\r\n        let game:any = cc.game;\r\n        var persistNodeList = Object.keys(game._persistRootNodes).map(function (x) {\r\n            return game._persistRootNodes[x];\r\n        });\r\n        return ResUtil.getNodesDepends(persistNodeList);\r\n    }\r\n\r\n    /**\r\n     * 处理场景切换，分两种情况，一种为根据scene的uuid找到场景的资源，另外一种为根据scene.dependAssets进行缓存\r\n     * @param scene \r\n     */\r\n    private onSceneChange(scene: cc.Scene) {\r\n        console.log('On Scene Change');\r\n        if (CC_EDITOR || this.lastScene == scene) {\r\n            return;\r\n        }\r\n\r\n        // 获取新场景的依赖\r\n        let depends: string[] = null;\r\n        if (scene['dependAssets'] instanceof Array) {\r\n            depends = scene['dependAssets'];\r\n        } else {\r\n            let item = loader.getItem(scene.uuid);\r\n            if(item) {\r\n                depends = item.dependKeys;\r\n            } else {\r\n                console.error(`cache scene faile ${scene}`);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // 缓存新场景的依赖\r\n        for (let i = 0; i < depends.length; ++i) {\r\n            // 下一个场景的资源可能是之前的常驻资源，这里\r\n            if (!this.persistDepends.has(depends[i])) {\r\n                this.cacheAsset(depends[i]);\r\n            }\r\n        }\r\n\r\n        // 获取持久节点依赖\r\n        let persistRes : Set<string> = this.getPersistDepends();\r\n\r\n        // 释放旧场景依赖\r\n        if (this.sceneDepends) {\r\n            for (let i = 0; i < this.sceneDepends.length; ++i) {\r\n                if (persistRes.has(this.sceneDepends[i])) {\r\n                    // 如果是常驻节点的资源，就先不释放，放到persistDepends，等待合适的时机释放\r\n                    this.persistDepends.add(this.sceneDepends[i]);\r\n                } else if (!this.persistDepends.has(this.sceneDepends[i])) {\r\n                    // 当资源是上个场景的依赖，又是上上个场景的依赖和常驻资源时，释放的话会导致重复释放\r\n                    this.releaseAsset(this.sceneDepends[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // 释放不再是常驻节点依赖的资源，防止泄露，遍历中删除是安全的\r\n        this.persistDepends.forEach((item) => {\r\n            if (!persistRes.has(item)) {\r\n                this.releaseAsset(item);\r\n                this.persistDepends.delete(item);\r\n            }\r\n        });\r\n\r\n        // 切场景时，自动释放默认资源\r\n        this.getKeeper().releaseAssets();\r\n        this.lastScene = scene;\r\n    }\r\n\r\n\r\n    // 为cc.Asset注入引用计数的功能\r\n    private static assetInit() {\r\n        console.log('asset init');\r\n        if (!Object.getOwnPropertyDescriptor(cc.Asset.prototype, 'addRef')) {\r\n            Object.defineProperties(cc.Asset.prototype, {\r\n                refDepends: {\r\n                    configurable: true,\r\n                    writable: true,\r\n                    enumerable: false,\r\n                    value: false,\r\n                },\r\n                refCount: {\r\n                    configurable: true,\r\n                    writable: true,\r\n                    enumerable: false,\r\n                    value: 0,\r\n                },\r\n                addRef: {\r\n                    configurable: true,\r\n                    writable: true,\r\n                    value: function (): cc.Asset {\r\n                        ++this.refCount;\r\n                        return this;\r\n                    }\r\n                },\r\n                decRef: {\r\n                    configurable: true,\r\n                    writable: true,\r\n                    value: function (autoRelease = true): cc.Asset {\r\n                        --this.refCount;\r\n                        if (this.refCount <= 0 && autoRelease) {\r\n                            ResManager.Instance.releaseAsset(this);\r\n                        }\r\n                        return this;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private constructor() {\r\n        cc.game.once(cc.game.EVENT_ENGINE_INITED, ResManager.assetInit);\r\n        cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, (scene) => {\r\n            this.onSceneChange(scene);\r\n        });\r\n    }\r\n\r\n    public static get Instance() {\r\n        if (!this.instance) {\r\n            this.instance = new ResManager();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    public getKeeper() : ResKeeper {\r\n        return this.defaultKeeper;\r\n    }\r\n\r\n    private getReferenceKey(assetOrUrlOrUuid: cc.Asset | string) {\r\n        if (assetOrUrlOrUuid instanceof cc.Asset && !assetOrUrlOrUuid['_uuid']) {\r\n            // 远程资源没有_uuid\r\n            if (assetOrUrlOrUuid.url) {\r\n                return assetOrUrlOrUuid.url;\r\n            }\r\n        }\r\n        return loader._getReferenceKey(assetOrUrlOrUuid);\r\n    }\r\n\r\n    /**\r\n     * 缓存一个资源\r\n     * @param item 资源的item对象\r\n     */\r\n    private cacheItem(item: any) {\r\n        if (item) {\r\n            let asset: cc.Asset = item.content;\r\n            if (asset instanceof cc.Asset) {\r\n                asset.addRef();\r\n                if (!asset.refDepends && item.dependKeys) {\r\n                    let depends = item.dependKeys;\r\n                    for (var i = 0; i < depends.length; i++) {\r\n                        this.cacheItem(loader.getItem(depends[i]));\r\n                    }\r\n                    asset.refDepends = true;\r\n                }\r\n            } else {\r\n                // 原生资源、html元素有可能走到这里，原生资源都是有对应的cc.Asset对应引用的，所以这里可以不处理\r\n                console.log(`cacheItem ${item} is not cc.Asset ${asset}`);\r\n            }\r\n        } else {\r\n            console.warn(`cacheItem error, item is ${item}`);\r\n        }\r\n    }\r\n\r\n    public cacheAsset(assetOrUrlOrUuid: cc.Asset | string) {\r\n        let key = this.getReferenceKey(assetOrUrlOrUuid);\r\n        if (key) {\r\n            let item = loader.getItem(key);\r\n            if (item) {\r\n                this.cacheItem(item);\r\n            } else {\r\n                console.warn(`cacheAsset error, loader.getItem ${key} is ${item}`);\r\n            }\r\n        } else {\r\n            console.warn(`cacheAsset error, this.getReferenceKey ${assetOrUrlOrUuid} return ${key}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放一个资源\r\n     * @param item 资源的item对象\r\n     */\r\n    private releaseItem(item: any, dec: boolean = false) {\r\n        if (item && item.content) {\r\n            let asset: any = item.content;\r\n            let res = item.uuid || item.id;\r\n            if (asset instanceof cc.Asset) {\r\n                if (dec) {\r\n                    asset.decRef(false);\r\n                }\r\n                if (asset.refCount <= 0) {\r\n                    let depends = item.dependKeys;\r\n                    if (depends) {\r\n                        for (var i = 0; i < depends.length; i++) {\r\n                            this.releaseItem(loader.getItem(depends[i]), true);\r\n                        }\r\n                    }\r\n\r\n                    loader.release(res);\r\n                    cc.log(`loader.release cc.Asset ${res}`);\r\n                }\r\n            } else {\r\n                loader.release(res);\r\n                cc.log(`loader.release ${res} rawAsset ${asset}`);\r\n            }\r\n        } else {\r\n            console.warn(`releaseItem error, item is ${item}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放一个资源（会减少其引用计数）\r\n     * @param assetOrUrlOrUuid \r\n     */\r\n    public releaseAsset(assetOrUrlOrUuid: cc.Asset | string) {\r\n        let key = this.getReferenceKey(assetOrUrlOrUuid);\r\n        if (key) {\r\n            let item = loader.getItem(key);\r\n            if (item) {\r\n                this.releaseItem(item);\r\n            } else {\r\n                console.warn(`releaseAsset error, loader.getItem ${key} is ${item}`);\r\n            }\r\n        } else {\r\n            console.warn(`releaseAsset error, this.getReferenceKey ${assetOrUrlOrUuid} return ${key}`);\r\n        }\r\n    }\r\n}\r\n"]}