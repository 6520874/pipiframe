{"version":3,"sources":["assets/Script/res/ResUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ResKeeper } from \"./ResKeeper\";\r\nimport { CompletedCallback, ProcessCallback } from \"./ResLoader\";\r\nimport ResManager from \"./ResManager\";\r\n/**\r\n * 资源使用相关工具类\r\n * 2020-1-18 by 宝爷\r\n */\r\n\r\nfunction parseDepends(key, parsed: Set<string>) {\r\n    let loader: any = cc.loader;\r\n    var item = loader.getItem(key);\r\n    if (item) {\r\n        var depends = item.dependKeys;\r\n        if (depends) {\r\n            for (var i = 0; i < depends.length; i++) {\r\n                var depend = depends[i];\r\n                if (!parsed.has(depend)) {\r\n                    parsed.add(depend);\r\n                    parseDepends(depend, parsed);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction visitAsset(asset, excludeMap: Set<string>) {\r\n    if (!asset._uuid) {\r\n        return;\r\n    }\r\n    let loader: any = cc.loader;\r\n    var key = loader._getReferenceKey(asset);\r\n    if (!excludeMap.has(key)) {\r\n        excludeMap.add(key);\r\n        parseDepends(key, excludeMap);\r\n    }\r\n}\r\n\r\nfunction visitComponent(comp, excludeMap) {\r\n    var props = Object.getOwnPropertyNames(comp);\r\n    for (var i = 0; i < props.length; i++) {\r\n        var value = comp[props[i]];\r\n        if (typeof value === 'object' && value) {\r\n            if (Array.isArray(value)) {\r\n                for (let j = 0; j < value.length; j++) {\r\n                    let val = value[j];\r\n                    if (val instanceof cc.RawAsset) {\r\n                        visitAsset(val, excludeMap);\r\n                    }\r\n                }\r\n            }\r\n            else if (!value.constructor || value.constructor === Object) {\r\n                let keys = Object.getOwnPropertyNames(value);\r\n                for (let j = 0; j < keys.length; j++) {\r\n                    let val = value[keys[j]];\r\n                    if (val instanceof cc.RawAsset) {\r\n                        visitAsset(val, excludeMap);\r\n                    }\r\n                }\r\n            }\r\n            else if (value instanceof cc.RawAsset) {\r\n                visitAsset(value, excludeMap);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction visitNode(node, excludeMap) {\r\n    for (let i = 0; i < node._components.length; i++) {\r\n        visitComponent(node._components[i], excludeMap);\r\n    }\r\n    for (let i = 0; i < node._children.length; i++) {\r\n        visitNode(node._children[i], excludeMap);\r\n    }\r\n}\r\n\r\nexport class ResUtil {\r\n    /**\r\n     * 开始加载资源\r\n     * @param bundle        assetbundle的路径\r\n     * @param url           资源url或url数组\r\n     * @param type          资源类型，默认为null\r\n     * @param onProgess     加载进度回调\r\n     * @param onCompleted   加载完成回调\r\n     */\r\n    public static load(attachNode: cc.Node, url: string, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, url: string, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, url: string, type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, url: string[], onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, url: string[], onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, url: string[], type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, url: string[], type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, bundle: string, url: string, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, bundle: string, url: string, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, bundle: string, url: string, type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, bundle: string, url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, bundle: string, url: string[], onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, bundle: string, url: string[], onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, bundle: string, url: string[], type: typeof cc.Asset, onCompleted: CompletedCallback);\r\n    public static load(attachNode: cc.Node, bundle: string, url: string[], type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback);\r\n    public static load() {\r\n        let attachNode = arguments[0];\r\n        let keeper = ResUtil.getResKeeper(attachNode);\r\n        let newArgs = new Array();\r\n        for (let i = 1; i < arguments.length; ++i) {\r\n            newArgs[i - 1] = arguments[i];\r\n        }\r\n        keeper.load.apply(keeper, newArgs);\r\n    }\r\n\r\n    /**\r\n     * 从目标节点或其父节点递归查找一个资源挂载组件\r\n     * @param attachNode 目标节点\r\n     * @param autoCreate 当目标节点找不到ResKeeper时是否自动创建一个\r\n     */\r\n    public static getResKeeper(attachNode: cc.Node, autoCreate?: boolean): ResKeeper {\r\n        if (attachNode) {\r\n            let ret = attachNode.getComponent(ResKeeper);\r\n            if (!ret) {\r\n                if (autoCreate) {\r\n                    return attachNode.addComponent(ResKeeper);\r\n                } else {\r\n                    return ResUtil.getResKeeper(attachNode.parent, autoCreate);\r\n                }\r\n            }\r\n            return ret;\r\n        }\r\n        return ResManager.Instance.getKeeper();\r\n    }\r\n\r\n     /**\r\n     * 赋值srcAsset，并使其跟随targetNode自动释放，用法如下\r\n     * mySprite.spriteFrame = AssignWith(otherSpriteFrame, mySpriteNode);\r\n     * @param srcAsset 用于赋值的资源，如cc.SpriteFrame、cc.Texture等等\r\n     * @param targetNode \r\n     * @param autoCreate \r\n     */\r\n    public static assignWith(srcAsset: cc.Asset, targetNode: cc.Node, autoCreate?: boolean): any {\r\n        let keeper = ResUtil.getResKeeper(targetNode, autoCreate);\r\n        if (keeper && srcAsset instanceof cc.Asset) {\r\n            keeper.cacheAsset(srcAsset);\r\n            return srcAsset;\r\n        } else {\r\n            console.error(`assignWith ${srcAsset} to ${targetNode} faile`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 实例化一个prefab，并带自动释放功能\r\n     * @param prefab 要实例化的预制\r\n     */\r\n    public static instantiate(prefab: cc.Prefab): cc.Node {\r\n        let node = cc.instantiate(prefab);\r\n        let keeper = ResUtil.getResKeeper(node, true);\r\n        if (keeper) {\r\n            keeper.cacheAsset(prefab);\r\n        }\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * 获取一系列节点依赖的资源\r\n     */\r\n    public static getNodesDepends(nodes: cc.Node[]): Set<string> {\r\n        let ret: Set<string> = new Set<string>();\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            visitNode(nodes[i], ret)\r\n        }\r\n        return ret;\r\n    }\r\n\t\r\n    /**\r\n     * 从字符串中查找第N个字符\r\n     * @param str 目标字符串\r\n     * @param cha 要查找的字符\r\n     * @param num 第N个\r\n     */\r\n    static findCharPos(str: string, cha: string, num: number): number {\r\n        let x = str.indexOf(cha);\r\n        let ret = x;\r\n        for (var i = 0; i < num; i++) {\r\n            x = str.indexOf(cha, x + 1);\r\n            if (x != -1) {\r\n                ret = x;\r\n            } else {\r\n                return ret;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * 获取当前调用堆栈\r\n     * @param popCount 要弹出的堆栈数量\r\n     */\r\n    static getCallStack(popCount: number): string {\r\n        // 严格模式无法访问 arguments.callee.caller 获取堆栈，只能先用Error的stack\r\n        let ret = (new Error()).stack;\r\n        let pos = ResUtil.findCharPos(ret, '\\n', popCount);\r\n        if (pos > 0) {\r\n            ret = ret.slice(pos);\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n"]}