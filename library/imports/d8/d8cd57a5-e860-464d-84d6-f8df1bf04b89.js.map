{"version":3,"sources":["assets/Script/network/NetManager.ts"],"names":[],"mappings":";;;;;;AAGA;;;;EAIE;AAEF;IAAA;QAEc,cAAS,GAA+B,EAAE,CAAC;IA2DzD,CAAC;IAzDiB,sBAAW,GAAzB;QACI,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;YACxB,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,EAAE,CAAC;SACrC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,qBAAqB;IACd,+BAAU,GAAjB,UAAkB,OAAgB,EAAE,SAAqB;QAArB,0BAAA,EAAA,aAAqB;QACrD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;IACxC,CAAC;IAED,SAAS;IACF,kCAAa,GAApB,UAAqB,SAAiB;QAClC,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAED,WAAW;IACJ,4BAAO,GAAd,UAAe,OAA0B,EAAE,SAAqB;QAArB,0BAAA,EAAA,aAAqB;QAC5D,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;YAC3B,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SACrD;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,WAAW;IACJ,yBAAI,GAAX,UAAY,GAAY,EAAE,KAAsB,EAAE,SAAqB;QAA7C,sBAAA,EAAA,aAAsB;QAAE,0BAAA,EAAA,aAAqB;QACnE,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,IAAG,IAAI,EAAE;YACL,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAChC;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,0BAA0B;IACnB,4BAAO,GAAd,UAAe,GAAY,EAAE,MAAc,EAAE,SAAyB,EAAE,QAAwB,EAAE,KAAsB,EAAE,SAAqB;QAAvE,yBAAA,EAAA,eAAwB;QAAE,sBAAA,EAAA,aAAsB;QAAE,0BAAA,EAAA,aAAqB;QAC3I,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,IAAG,IAAI,EAAE;YACL,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SACzD;IACL,CAAC;IAED,mDAAmD;IAC5C,kCAAa,GAApB,UAAqB,GAAY,EAAE,MAAc,EAAE,SAAyB,EAAE,QAAwB,EAAE,KAAsB,EAAE,SAAqB;QAAvE,yBAAA,EAAA,eAAwB;QAAE,sBAAA,EAAA,aAAsB;QAAE,0BAAA,EAAA,aAAqB;QACjJ,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,IAAG,IAAI,EAAE;YACL,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SACtE;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,WAAW;IACJ,0BAAK,GAAZ,UAAa,IAAa,EAAE,MAAe,EAAE,SAAqB;QAArB,0BAAA,EAAA,aAAqB;QAC9D,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;YAC3B,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SAC9D;IACL,CAAC;IA3Dc,oBAAS,GAAe,IAAI,CAAC;IA4DhD,iBAAC;CA7DD,AA6DC,IAAA;AA7DY,gCAAU","file":"","sourceRoot":"/","sourcesContent":["import { NetNode, NetConnectOptions } from \"./NetNode\";\nimport { NetData, CallbackObject } from \"./NetInterface\";\n\n/*\n*   网络节点管理类\n*\n*   2019-10-8 by 宝爷\n*/\n\nexport class NetManager {\n    private static _instance: NetManager = null;\n    protected _channels: { [key: number]: NetNode } = {};\n\n    public static getInstance(): NetManager {\n        if (this._instance == null) {\n            this._instance = new NetManager();\n        }\n        return this._instance;\n    }\n\n    // 添加Node，返回ChannelID\n    public setNetNode(newNode: NetNode, channelId: number = 0) {\n        this._channels[channelId] = newNode;\n    }\n\n    // 移除Node\n    public removeNetNode(channelId: number) {\n        delete this._channels[channelId];\n    }\n\n    // 调用Node连接\n    public connect(options: NetConnectOptions, channelId: number = 0): boolean {\n        if (this._channels[channelId]) {\n            return this._channels[channelId].connect(options);\n        }\n        return false;\n    }\n\n    // 调用Node发送\n    public send(buf: NetData, force: boolean = false, channelId: number = 0): boolean {\n        let node = this._channels[channelId];\n        if(node) {\n            return node.send(buf, force);\n        }\n        return false;\n    }\n\n    // 发起请求，并在在结果返回时调用指定好的回调函数\n    public request(buf: NetData, rspCmd: number, rspObject: CallbackObject, showTips: boolean = true, force: boolean = false, channelId: number = 0) {\n        let node = this._channels[channelId];\n        if(node) {\n            node.request(buf, rspCmd, rspObject, showTips, force);\n        }\n    }\n\n    // 同request，但在request之前会先判断队列中是否已有rspCmd，如有重复的则直接返回\n    public requestUnique(buf: NetData, rspCmd: number, rspObject: CallbackObject, showTips: boolean = true, force: boolean = false, channelId: number = 0): boolean {\n        let node = this._channels[channelId];\n        if(node) {\n            return node.requestUnique(buf, rspCmd, rspObject, showTips, force);\n        }\n        return false;\n    }\n\n    // 调用Node关闭\n    public close(code?: number, reason?: string, channelId: number = 0) {\n        if (this._channels[channelId]) {\n            return this._channels[channelId].closeSocket(code, reason);\n        }\n    }\n}"]}